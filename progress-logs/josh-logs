USE CASE(S): Login and signup, accessing past canvases and storing new ones
2025-07-22 Created interactor to retrieve user documents (e.g. Google Docs)
2025-07-23 Created Entity to JSON converter to start working on the database API
2025-07-24 resolving massive conflict to do with Users and UserDataAccess things
2025-07-25 supabase database repository functionality; adding, creating, updating, deleting users in external DB
2025-07-25 reconcile conflict between Signup/LoginUserDataAccessInterface and UserDataAccessInterface. Changes below:

    Changes to Signup/LoginUserDataAccessInterface
    - signup/login interfaces now EXTEND user data access interface
    - two similar methods have been renamed for consistency
        - save -> addUser
        - get -> getUser

    Changes to InMemoryUserDataAccessObject
    - create update User password

2025-07-25 created persistent (database) user signup/login functionality.
    If you want to test the signup/login with the DB, go to Main.java
    and uncomment the "final SupabaseAccountRepository userDataAccessObject" line then comment out
    the "final InMemoryUserDataAccessObject userDataAccessObject" line.

    Currently, the database will always have the following user/pswd pairs as valid login details:
        user/pswd
        beabadoobee / plaintext123
        saliva / ilovecheetos1

2025-08-05 Created canvas selection screen after log in
General description: upon login, users are faced with a summary of their saved canvases.
canvas image data is fed through the login use case interface adapter, since the event happens on login success.

## Misc.
- create resources/sample-canvases and added 3 png files for testing canvas repository

## Frameworks & Drivers
#### InMemoryCanvasDataAccessObject
- literal one line change; now serves images from sample-canvases
#### MyCanvasesView
- add field "canvasesPanel" for the canvas select subpanel
- create methods refreshCanvasesPanel, getScaledImage
- modify method propertyChange to call refreshCanvasesPanel on events titled "canvases"

## Interface Adapter
#### LoginPresenter
- modify method prepareSuccessView to update the "canvas select" view model (newCanvasViewModel) with user's retrieved canvases and fire a property change
#### NewCanvasPresenter
- nothing. a code snippet to populate new canvas view state was added and replaced immediately. for future reference.
#### NewCanvasViewModel
- added unused title constant for the title on screen + updateNewCanvasTitle method
- create methods getCanvases and setCanvases; retrieve canvases stored in current state
#### NewCanvasState
- added methods getCanvases, setCanvases

## Use Case / Business Rules
#### LoginInteractor
- modify method execute: upon login, the user's canvases are retrieved, put into output data, and fed to LoginPresenter.prepareSuccessView
#### LoginOutputData
- add javadoc for methods
#### NewCanvasInputBoundary, NewCanvasInteractor
- added unused getUserCanvases method
#### NewCanvasOutputBoundary
- added parameter for output data to NewCanvasOutputBoundary.

## App
#### LoginUseCaseFactory, Main
- constructor for LoginInteractor was updated, so some data access objects had to be added to parameters

2025-08-07 Implemented "Import/Retrieve Existing Canvas"
General description: The canvas select screen in the previous entry was non-functional. Now, when you click
on a canvas, it immediately imports that image.
Details in pull request #77 (?)